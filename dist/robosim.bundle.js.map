{"version":3,"file":"robosim.bundle.js","sources":["../src/EventTargetShim.ts","../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/vec4.js","../node_modules/gl-matrix/esm/vec2.js","../src/Simulation.ts","../src/Inspector.ts","../src/Entity.ts","../src/Camera.ts","../src/image-util.ts","../src/Robot.ts","../src/robosim.ts"],"sourcesContent":["export default class EventTargetShim {\n\tprivate listeners: Map<string, Set<EventListener>> = new Map();\n\n\tpublic addEventListener(eventType: string, listener: EventListener): void {\n\t\tconst existing = this.listeners.get(eventType);\n\t\tif (existing) existing.add(listener);\n\t\telse this.listeners.set(eventType, new Set([listener]));\n\t}\n\n\tpublic removeEventListener(eventType: string, listener: EventListener): void {\n\t\tconst existing = this.listeners.get(eventType);\n\t\tif (existing) existing.delete(listener);\n\t}\n\n\tpublic dispatchEvent(event: Event|CustomEvent<any>) {\n\t\tconst existing = this.listeners.get(event.type);\n\t\tif (existing) for (let listener of existing.values()) listener(event);\n\t}\n}\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {vec4} result the receiving vector\r\n * @param {vec4} U the first vector\r\n * @param {vec4} V the second vector\r\n * @param {vec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n;\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import { Entity } from './Entity';\r\nimport EventTargetShim from './EventTargetShim';\r\n// import { vec2 } from '../lib/gl-matrix/esm/index.js';\r\nimport { vec2 } from 'gl-matrix';\r\n\r\nexport type SimState = {\r\n  /** the current simulation time in seconds */\r\n  time: number,\r\n  /** the input state at the start of the step */\r\n  input: {\r\n    pointer: {\r\n      position: vec2,\r\n      button1: boolean,\r\n      button2: boolean,\r\n      button3: boolean,\r\n      button4: boolean,\r\n      button5: boolean,\r\n    },\r\n  },\r\n  /** the list of entities known to the simulation */\r\n  entities: Set<Entity>,\r\n};\r\n\r\nexport class Simulation extends EventTargetShim {\r\n  public static PX_PER_METER = 96;\r\n  /** the time between simulation steps (ms) */\r\n  public timestep = 20;\r\n  /** the multiplier for relating simulation time to real time */\r\n  private timeMultiplier = 1;\r\n  public state: SimState;\r\n  public isStopped = true;\r\n  public isPaused = false;\r\n  private stepTimer?: number;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = this.createInitialState();\r\n\r\n    document.body.addEventListener('pointermove', (event) => {\r\n      this.state.input.pointer.position[0] = event.clientX;\r\n      this.state.input.pointer.position[1] = event.clientY;\r\n    });\r\n\r\n    document.body.addEventListener('pointerdown', (event) => {\r\n      this.state.input.pointer.button1 = (event.buttons & 0x01) > 0;\r\n      this.state.input.pointer.button2 = (event.buttons & 0x02) > 0;\r\n      this.state.input.pointer.button3 = (event.buttons & 0x04) > 0;\r\n      this.state.input.pointer.button4 = (event.buttons & 0x08) > 0;\r\n      this.state.input.pointer.button5 = (event.buttons & 0x16) > 0;\r\n    });\r\n\r\n    document.body.addEventListener('pointerup', (event) => {\r\n      this.state.input.pointer.button1 = (event.buttons & 0x01) > 0;\r\n      this.state.input.pointer.button2 = (event.buttons & 0x02) > 0;\r\n      this.state.input.pointer.button3 = (event.buttons & 0x04) > 0;\r\n      this.state.input.pointer.button4 = (event.buttons & 0x08) > 0;\r\n      this.state.input.pointer.button5 = (event.buttons & 0x16) > 0;\r\n    });\r\n  }\r\n\r\n  public get timeScale() { return this.timeMultiplier; }\r\n  public set timeScale(newScale: number) {\r\n    this.timeMultiplier = newScale;\r\n    if (this.isPaused || this.isStopped) return;\r\n    const passedTime = performance.now() - this.state.time;\r\n    clearTimeout(this.stepTimer);\r\n    this.stepTimer = setTimeout(this.step.bind(this), this.timestep / this.timeMultiplier - passedTime);\r\n  }\r\n\r\n  private createInitialState(): SimState {\r\n    return {\r\n      time: 0,\r\n      input: {\r\n        pointer: {\r\n          position: vec2.create(),\r\n          button1: false,\r\n          button2: false,\r\n          button3: false,\r\n          button4: false,\r\n          button5: false,\r\n        },\r\n      },\r\n      entities: new Set()\r\n    };\r\n  }\r\n\r\n  public reset(): void {\r\n    this.state = this.createInitialState();\r\n    this.dispatchEvent(new CustomEvent<SimState>('update', { detail: this.state }));\r\n  }\r\n\r\n  public addEntity(entity: Entity): void {\r\n    this.state.entities.add(entity);\r\n    entity.initialize(this);\r\n  }\r\n\r\n  public start(): void {\r\n    this.stepTimer = setTimeout(this.step.bind(this), this.timestep / this.timeMultiplier);\r\n    if (this.isStopped) {\r\n      this.dispatchEvent(new Event('start'));\r\n      this.isStopped = false;\r\n    } else {\r\n      this.isPaused = false;\r\n      this.dispatchEvent(new Event('resume'));\r\n    }\r\n  }\r\n\r\n  public pause(): void {\r\n    this.isPaused = true;\r\n    this.dispatchEvent(new Event('pause'));\r\n    clearTimeout(this.stepTimer);\r\n  }\r\n\r\n  public stop(): void {\r\n    clearTimeout(this.stepTimer);\r\n    this.isStopped = true;\r\n    this.dispatchEvent(new Event('stop'));\r\n    this.reset();\r\n  }\r\n\r\n  public update(state: SimState): void {\r\n    this.dispatchEvent(new CustomEvent<SimState>('update', { detail: state }));\r\n    for (const entity of this.state.entities) {\r\n      entity.update(state);\r\n    }\r\n  }\r\n\r\n  public step(): void {\r\n    const start = performance.now();\r\n    this.state.time += this.timestep / 1000;\r\n    if (!this.isPaused) this.stepTimer = setTimeout(this.step.bind(this), this.timestep / this.timeMultiplier);\r\n    this.update(this.state);\r\n    const end = performance.now();\r\n    // console.log(start == end);\r\n    // console.log((end - start) / (this.timestep / this.timeMultiplier));\r\n  }\r\n}\r\n","import { vec3, vec2 } from 'gl-matrix';\r\n\r\nexport interface InspectorView {\r\n  name: string;\r\n  render(): HTMLElement;\r\n}\r\n\r\nexport class VectorView implements InspectorView {\r\n  public name: string = 'vector';\r\n  private outX = document.createElement('input');\r\n  private outY = document.createElement('input');\r\n  private outZ = document.createElement('input');\r\n\r\n  public get disabled() {\r\n    return this.outX.disabled;\r\n  }\r\n\r\n  public set disabled(isDisabled: boolean) {\r\n    this.outX.disabled = isDisabled;\r\n    this.outY.disabled = isDisabled;\r\n    this.outZ.disabled = isDisabled;\r\n  }\r\n\r\n  public setData(vector: vec3): void {\r\n    this.outX.value = vector[0].toFixed(3);\r\n    this.outY.value = vector[1].toFixed(3);\r\n    this.outZ.value = vector[2].toFixed(3);\r\n  }\r\n\r\n  public render(): HTMLElement {\r\n    const fieldset = document.createElement('fieldset');\r\n    fieldset.classList.add('view', 'vector');\r\n    const legend = document.createElement('legend');\r\n    legend.textContent = this.name;\r\n    this.disabled = true;\r\n    fieldset.appendChild(legend);\r\n    fieldset.appendChild(this.outX);\r\n    fieldset.appendChild(this.outY);\r\n    fieldset.appendChild(this.outZ);\r\n    return fieldset;\r\n  }\r\n}\r\n\r\nexport class ImageDataView<T> implements InspectorView {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D|null;\r\n  public name: string = 'image';\r\n\r\n  constructor({ width, height }: { width: number, height: number}) {\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.width = width;\r\n    this.canvas.height = height;\r\n    this.canvas.classList.add('pixelated');\r\n    this.ctx = this.canvas.getContext('2d', { alpha: false });\r\n  }\r\n\r\n  public setData(data: T): void {\r\n    if (this.ctx === null) return;\r\n    const { width, height } = this.canvas;\r\n    if (data instanceof Uint8ClampedArray) {\r\n      this.ctx.putImageData(new ImageData(data, width, height), 0, 0);\r\n    } else if (data instanceof Float32Array) {\r\n      const max = Math.max(...data);\r\n      const data2 = new Uint8ClampedArray(data.reduce((prev, x) => {\r\n        prev.push(...new Array(4).fill(256 * x / max))\r\n        return prev;\r\n      }, new Array()));\r\n      this.ctx.putImageData(new ImageData(data2, width, height), 0, 0);\r\n    } else if (Array.isArray(data)) {\r\n      if (typeof data[0] === 'boolean') {\r\n        const data2 = new Uint8ClampedArray(data.reduce((prev, x) => {\r\n          prev.push(...new Array(4).fill(x ? 255 : 0))\r\n          return prev;\r\n        }, new Array()));\r\n        this.ctx.putImageData(new ImageData(data2, width, height), 0, 0);\r\n      } else {\r\n        throw new TypeError(`data type '${typeof data[0]}[]' not supported`);\r\n      }\r\n    } else {\r\n      throw new TypeError(`data type '${typeof data}' not supported`);\r\n    }\r\n  }\r\n\r\n  public render(): HTMLElement {\r\n    const fieldset = document.createElement('fieldset');\r\n    fieldset.classList.add('view', 'image-data');\r\n    const legend = document.createElement('legend');\r\n    legend.textContent = this.name;\r\n    fieldset.appendChild(legend);\r\n    fieldset.appendChild(this.canvas);\r\n    return fieldset;\r\n  }\r\n}\r\n\r\nfunction normalize(value: number, min: number, max: number): number {\r\n  return (value - min) / (max - min);\r\n}\r\n\r\nexport class PlotXYView implements InspectorView {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  public name: string = 'image';\r\n  private series: Map<string, { value?: vec3, getValue?: () => vec3, color: string, min: vec2, max: vec2 }> = new Map();\r\n  public paused: boolean = true;\r\n  private stopped: boolean = true;\r\n\r\n  private colors = (function*() {\r\n    let i = 0;\r\n    const colors = [\r\n      '#f28779',\r\n      '#5c6773',\r\n      '#ffa759',\r\n      '#d4bfff',\r\n      '#ffd580',\r\n      '#73d0ff',\r\n      '#bae67e',\r\n      '#95e6cb',\r\n      '#cbccc6',\r\n    ];\r\n    while (true) yield colors[i++ % colors.length];\r\n  })();\r\n\r\n  constructor() {\r\n    this.canvas = document.createElement('canvas');\r\n    const ctx = this.canvas.getContext('2d', { alpha: true });\r\n    if (ctx === null) throw new Error('Failed to get canvas context');\r\n    this.ctx = ctx;\r\n    this.canvas.width = 64 * 3;\r\n    this.canvas.height = this.canvas.width;\r\n    // requestAnimationFrame(this.draw.bind(this));\r\n\r\n    this.addSeries('zero', {\r\n      value: vec3.fromValues(0, 0, 1),\r\n      color: '#60697a',\r\n      min: vec2.fromValues(-1, -1),\r\n      max: vec2.fromValues(1, 1),\r\n    });\r\n  }\r\n\r\n  public stop(): void {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.stopped = true;\r\n  }\r\n\r\n  public start(): void {\r\n    this.paused = false;\r\n    this.stopped = false;\r\n    requestAnimationFrame(this.draw.bind(this));\r\n  }\r\n\r\n  private draw(): void {\r\n    if (!this.stopped) requestAnimationFrame(this.draw.bind(this));\r\n    if (this.paused) return;\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    for (let data of this.series.values()) {\r\n      let value: vec3;\r\n      if (typeof data.getValue !== 'undefined') value = data.getValue();\r\n      else if (typeof data.value !== 'undefined') value = data.value;\r\n      else throw new Error('no defined data');\r\n      const x = this.canvas.width * normalize(value[0], data.min[0], data.max[0]);\r\n      const y = this.canvas.height * normalize(value[1], data.min[1], data.max[1]);\r\n      const radius = value[2];\r\n      this.ctx.fillStyle = data.color;\r\n      this.ctx.beginPath();\r\n      this.ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n      this.ctx.fill();\r\n    }\r\n  }\r\n\r\n  public addSeries(name: string, { value, getValue, color, min, max }: { value?: vec3, getValue?: () => vec3, color?: string, min: vec2, max: vec2 }): void {\r\n    if (!color) color = this.colors.next().value;\r\n    this.series.set(name, { value, getValue, color, min, max });\r\n  }\r\n\r\n  public setValue(seriesName: string, value: vec3): void {\r\n    const series = this.series.get(seriesName);\r\n    if (!series) throw new Error(`Series '${seriesName}' not found.`);\r\n    series.value = value;\r\n  }\r\n\r\n  public render(): HTMLCanvasElement {\r\n    return this.canvas;\r\n  }\r\n}\r\n\r\nexport class PlotTimeSeriesView implements InspectorView {\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n  public name: string = 'image';\r\n  /** pixels per second */\r\n  public scrollRate: number = 10;\r\n  private series: Map<string, { value?: number, getValue?: (t: number) => number, color: string, min: number, max: number }> = new Map();\r\n  public paused: boolean = true;\r\n  private stopped: boolean = true;\r\n\r\n  private colors = (function*() {\r\n    let i = 0;\r\n    const colors = [\r\n      '#f28779',\r\n      '#5c6773',\r\n      '#ffa759',\r\n      '#d4bfff',\r\n      '#ffd580',\r\n      '#73d0ff',\r\n      '#bae67e',\r\n      '#95e6cb',\r\n      '#cbccc6',\r\n    ];\r\n    while (true) yield colors[i++ % colors.length];\r\n  })();\r\n\r\n  constructor() {\r\n    this.canvas = document.createElement('canvas');\r\n    const ctx = this.canvas.getContext('2d', { alpha: true });\r\n    if (ctx === null) throw new Error('Failed to get canvas context');\r\n    this.ctx = ctx;\r\n    this.canvas.width = 64 * 3;\r\n    this.canvas.height = this.canvas.width;\r\n    // requestAnimationFrame(this.draw.bind(this));\r\n\r\n    this.addSeries('zero', {\r\n      value: 0,\r\n      color: '#60697a',\r\n      min: -1,\r\n      max: 1,\r\n    });\r\n  }\r\n\r\n  public stop(): void {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.stopped = true;\r\n  }\r\n\r\n  public start(): void {\r\n    this.paused = false;\r\n    this.stopped = false;\r\n    requestAnimationFrame(this.draw.bind(this));\r\n  }\r\n\r\n  private draw(): void {\r\n    const t = performance.now();\r\n    if (!this.stopped) requestAnimationFrame(this.draw.bind(this));\r\n    if (this.paused) return;\r\n    const data = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);\r\n    this.ctx.putImageData(data, 1, 0);\r\n    this.ctx.clearRect(0, 0, 1, this.canvas.height);\r\n    for (let data of this.series.values()) {\r\n      let value;\r\n      if (typeof data.getValue !== 'undefined') value = data.getValue(t);\r\n      else if (typeof data.value !== 'undefined') value = data.value;\r\n      else throw new Error('no defined data');\r\n      const y = this.canvas.height * (1 - normalize(value, data.min, data.max));\r\n      this.ctx.fillStyle = data.color;\r\n      this.ctx.fillRect(0, y, 1, 1);\r\n    }\r\n  }\r\n\r\n  public addSeries(name: string, { value, getValue, color, min, max }: { value?: number, getValue?: (t: number) => number, color?: string, min: number, max: number }): void {\r\n    if (!color) color = this.colors.next().value;\r\n    this.series.set(name, { value, getValue, color, min, max });\r\n  }\r\n\r\n  public setValue(seriesName: string, value: number): void {\r\n    const series = this.series.get(seriesName);\r\n    if (!series) throw new Error(`Series '${seriesName}' not found.`);\r\n    series.value = value;\r\n  }\r\n\r\n  public render(): HTMLCanvasElement {\r\n    return this.canvas;\r\n  }\r\n}\r\n\r\nexport class Inspector {\r\n  private views: Set<InspectorView> = new Set();\r\n  constructor() {\r\n  }\r\n\r\n  public addView(view: InspectorView) {\r\n    this.views.add(view);\r\n  }\r\n\r\n  public removeView(view: InspectorView) {\r\n    this.views.delete(view);\r\n  }\r\n\r\n  public render(): HTMLElement {\r\n    const fieldset = document.createElement('fieldset');\r\n    fieldset.classList.add('inspector');\r\n    const legend = document.createElement('legend');\r\n    legend.textContent = 'Inspector';\r\n    fieldset.appendChild(legend);\r\n    for (let view of this.views) {\r\n      fieldset.appendChild(view.render());\r\n    }\r\n    return fieldset;\r\n  }\r\n}\r\n","import { Simulation, SimState } from './Simulation.js';\r\nimport { Inspector } from './Inspector.js';\r\nimport EventTargetShim from './EventTargetShim.js';\r\n// import { vec3, vec4 } from '../node_modules/gl-matrix/esm/index.js';\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nexport class Entity extends EventTargetShim {\r\n  public position: vec3;\r\n  public direction: vec4;\r\n  public inspector: Inspector;\r\n  public name: string = 'entity';\r\n\r\n  constructor(pos = vec3.create(), dir = vec4.create()) {\r\n    super();\r\n    this.position = pos;\r\n    this.direction = dir;\r\n    this.inspector = new Inspector();\r\n  }\r\n\r\n  public initialize(sim: Simulation) {}\r\n\r\n  public update(state: SimState) {}\r\n}\r\n\r\ntype ManualMarkerOptions = {\r\n  radius?: number,\r\n  color?: string,\r\n};\r\n\r\ntype AutoMarkerOptions = ManualMarkerOptions & {\r\n  period?: number,\r\n  phase?: number,\r\n  ax?: number,\r\n  ay?: number,\r\n  center?: vec3,\r\n};\r\n\r\nexport class ManualMarker extends Entity {\r\n  public radius: number;\r\n  public color: string;\r\n\r\n  constructor(options: ManualMarkerOptions) {\r\n    const defaults = Object.assign({\r\n      radius: 5,\r\n      color: '#ffffff',\r\n    }, options);\r\n    super();\r\n    this.radius = defaults.radius;\r\n    this.color = defaults.color;\r\n  }\r\n\r\n  public renderToCamera(ctx: CanvasRenderingContext2D): void {\r\n    ctx.fillStyle = this.color;\r\n    ctx.beginPath();\r\n    ctx.arc(this.position[0], this.position[1], this.radius, 0, 2 * Math.PI);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n  }\r\n\r\n  public update(state: SimState): void {\r\n    this.position[0] = state.input.pointer.position[0] / 3;\r\n    this.position[1] = state.input.pointer.position[1] / 3;\r\n  }\r\n}\r\n\r\nexport class AutoMarker extends ManualMarker {\r\n  public period: number;\r\n  public phase: number;\r\n  public ax: number;\r\n  public ay: number;\r\n  public center: vec3;\r\n\r\n  constructor(options: AutoMarkerOptions) {\r\n    const defaults = Object.assign({\r\n      radius: 5,\r\n      period: 1,\r\n      phase: 0,\r\n      ax: 8,\r\n      ay: 8,\r\n      center: vec3.fromValues(20, 20, 0),\r\n      color: '#ffffff',\r\n    }, options);\r\n    super({\r\n      radius: defaults.radius,\r\n      color: defaults.color\r\n    });\r\n    this.period = defaults.period;\r\n    this.phase = defaults.phase;\r\n    this.ax = defaults.ax;\r\n    this.ay = defaults.ay;\r\n    this.center = defaults.center;\r\n  }\r\n\r\n  public update(state: SimState): void {\r\n    const t = this.phase + state.time / this.period;\r\n    this.position[0] = this.center[0] + this.ax * Math.cos(t);\r\n    this.position[1] = this.center[1] + this.ay * Math.sin(t);\r\n  }\r\n}\r\n","import { Simulation, SimState } from './Simulation.js';\r\nimport { Entity, AutoMarker, ManualMarker } from './Entity.js';\r\n// import { vec3, vec4 } from '../node_modules/gl-matrix/esm/index.js';\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\ninterface CameraOptions {\r\n  width: number;\r\n  height: number;\r\n  pos?: vec3;\r\n  dir?: vec4;\r\n  fov?: number;\r\n  fps?: number;\r\n}\r\n\r\nexport class Camera extends Entity {\r\n  /** the camera's field of view in degrees */\r\n  public fov: number;\r\n\r\n  /** the canvas onto which the image is rendered */\r\n  private canvas: HTMLCanvasElement;\r\n  private ctx: CanvasRenderingContext2D;\r\n\r\n  /** the most recent image captured */\r\n  public lastCapture: ImageData|null;\r\n\r\n  /** the framerate of the camera */\r\n  private fps: number;\r\n\r\n  readonly width: number;\r\n  readonly height: number;\r\n\r\n  constructor(options: CameraOptions) {\r\n    const { width, height, pos, dir, fov, fps } = Object.assign({\r\n      pos: vec3.create(),\r\n      dir: vec4.create(),\r\n      fov: 90,\r\n      fps: 20,\r\n    }, options);\r\n\r\n    super(pos, dir);\r\n\r\n    this.fov = fov;\r\n    this.fps = fps;\r\n    this.lastCapture = null;\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.classList.add('pixelated');\r\n    this.width = this.canvas.width = width;\r\n    this.height = this.canvas.height = height;\r\n    const ctx = this.canvas.getContext('2d', { alpha: false });\r\n    if (ctx === null) throw new Error('Failed to get canvas context for camera');\r\n    this.ctx = ctx;\r\n  }\r\n\r\n  /**\r\n   * Initialize the simulation listeners\r\n   */\r\n  public initialize(sim: Simulation) {\r\n    let captureTimer: number;\r\n    sim.addEventListener('start', () => {\r\n      captureTimer = setInterval(this.capture.bind(this), 1000 / this.fps, sim.state);\r\n    });\r\n    sim.addEventListener('stop', () => clearInterval(captureTimer));\r\n    // Can't inspect camera views if we stop capturing on pause\r\n    // sim.addEventListener('resume', () => {\r\n    //   captureTimer = setInterval(this.capture.bind(this), 1000 / this.fps, sim.state);\r\n    // });\r\n    // sim.addEventListener('pause', () => clearInterval(captureTimer));\r\n  }\r\n\r\n  private capture(state: SimState) {\r\n    const w = this.canvas.width;\r\n    const h = this.canvas.height;\r\n\r\n    this.ctx.clearRect(0, 0, w, h);\r\n    for (const entity of state.entities) {\r\n      if (entity instanceof AutoMarker) {\r\n        entity.renderToCamera(this.ctx);\r\n      } else if (entity instanceof ManualMarker) {\r\n        entity.renderToCamera(this.ctx);\r\n      }\r\n    }\r\n\r\n    this.lastCapture = this.ctx.getImageData(0, 0, w, h);\r\n    this.dispatchEvent(new CustomEvent('capture', { detail: this.lastCapture }));\r\n  }\r\n}\r\n","import { vec2 } from 'gl-matrix';\r\n\r\n/** Maps a full-range (single-channel) image to a binary image at the threshold value specified. */\r\nexport function threshold(image: ImageData2<any>, value: number): ImageData2<boolean[]> {\r\n  const { width, height } = image;\r\n  const data: boolean[] = new Array<boolean>(width * height);\r\n\r\n  for (let i = 0; i < height; i++) {\r\n    for (let j = 0; j < width; j++) {\r\n      const index = i * width + j;\r\n      data[index] = image.data[image.channels * index] < value;\r\n    }\r\n  }\r\n\r\n  return { width, height, channels: 1, data };\r\n}\r\n\r\n/** Computes the distance between two colors in RGBA color space */\r\nexport function distanceRGBA(color1: Uint8ClampedArray, color2: Uint8ClampedArray): number {\r\n  const dr = color1[0] - color2[0];\r\n  const dg = color1[1] - color2[1];\r\n  const db = color1[2] - color2[2];\r\n  const da = color1[3] - color2[3];\r\n  return Math.hypot(dr, dg, db, da);\r\n}\r\n\r\nexport interface ImageData2<T> {\r\n  width: number;\r\n  height: number;\r\n  channels: number;\r\n  data: T;\r\n}\r\n\r\n/** Maps a RGBA8 image to a Float32 image, computes pixel-wise distance in RGBA color space. */\r\nexport function colorDistance(image: ImageData, color: Uint8ClampedArray): ImageData2<Float32Array> {\r\n  const { width, height } = image;\r\n  const data = new Float32Array(width * height);\r\n  for (let i = 0; i < height; i++) {\r\n    for (let j = 0; j < width; j++) {\r\n      const index = i * width + j;\r\n      const pixel = image.data.subarray(4 * index, 4 * index + 4);\r\n      data[index] = distanceRGBA(pixel, color);\r\n    }\r\n  }\r\n  return { width, height, channels: 1, data };\r\n}\r\n\r\n/** Binary Labeled Object */\r\nexport interface blob {\r\n  /** the number of pixels in this blob */\r\n  count: number;\r\n  /** the centroid of this blob (row, col) */\r\n  centroid: vec2;\r\n}\r\n\r\n// [ ][ ][ ][1][ ]\r\n// [ ][2][1][1][ ]\r\n// [ ][2][1][ ][ ]\r\n// [ ][ ][ ][ ][ ]\r\n// [ ][ ][ ][ ][ ]\r\n\r\nexport function blobify(image: ImageData2<boolean[]>): Map<number, blob> {\r\n  const { width, height } = image;\r\n  const labels = new Uint32Array(width * height);\r\n  labels.fill(0);\r\n  let lastLabel = 1;\r\n\r\n  for (let i = 0; i < height; i++) {\r\n    for (let j = 0; j < width; j++) {\r\n      const center = i * width + j;\r\n      if (image.data[center] === false) continue;\r\n      const left = labels[i * width + (j - 1)] || null;\r\n      const top = labels[(i - 1) * width + j] || null;\r\n      if (top !== null && top > 0 && left !== null && left > 0) {\r\n        // join center with top\r\n        labels[center] = top;\r\n        // join left with top\r\n        labels[i * width + (j - 1)] = top;\r\n        // TODO: this does not fix pixels past the one immediately left\r\n      } else if (top !== null && top > 0) {\r\n        // join center with top\r\n        labels[center] = top;\r\n      } else if (left !== null && left > 0) {\r\n        // join center with left\r\n        labels[center] = left;\r\n      } else {\r\n        // new label\r\n        lastLabel += 1;\r\n        labels[center] = lastLabel;\r\n      }\r\n    }\r\n  }\r\n\r\n  // compute list of blobs\r\n  const blobs: Map<number, blob> = new Map();\r\n  for (let i = 0; i < height; i++) {\r\n    for (let j = 0; j < width; j++) {\r\n      const label = labels[i * width + j];\r\n      if (label === 0) continue;\r\n      const b = blobs.get(label);\r\n      if (!b) blobs.set(label, { count: 1, centroid: vec2.fromValues(i, j) });\r\n      else {\r\n        b.count += 1;\r\n        b.centroid[0] += i;\r\n        b.centroid[1] += j;\r\n      }\r\n    }\r\n  }\r\n\r\n  // normalize centroids\r\n  for (let [label, b] of blobs) {\r\n    b.centroid[0] /= b.count;\r\n    b.centroid[1] /= b.count;\r\n  }\r\n\r\n  return blobs;\r\n}\r\n","import { SimState, Simulation } from './Simulation.js';\r\nimport { Entity } from './Entity.js';\r\nimport { Camera } from './Camera.js';\r\nimport { ImageDataView, PlotTimeSeriesView, PlotXYView } from './Inspector.js';\r\nimport {\r\n  colorDistance,\r\n  blobify,\r\n  threshold,\r\n  blob,\r\n} from './image-util.js';\r\n// import { vec3, vec4 } from '../lib/gl-matrix/esm/index.js';\r\nimport { vec3, vec4, vec2 } from 'gl-matrix';\r\n\r\nexport class Robot extends Entity {\r\n  private camera: Camera;\r\n  // private output1: HTMLTextAreaElement;\r\n  // private output2: HTMLOutputElement;\r\n  private view0: ImageDataView<Uint8ClampedArray>;\r\n  private view1: ImageDataView<boolean[]>;\r\n  private view2: ImageDataView<Float32Array>;\r\n  private view3: PlotTimeSeriesView;\r\n  private view4: PlotXYView;\r\n  private dx: number = 0;\r\n  private maxBlob: blob = { centroid: vec2.create(), count: 0 };\r\n\r\n  constructor(pos = vec3.create(), dir = vec4.create()) {\r\n    super(pos, dir);\r\n    // Camera re-uses the same position and direction vectors\r\n    this.camera = new Camera({ width: 64, height: 64, pos, dir });\r\n    this.camera.addEventListener('capture', this.onCapture.bind(this) as EventListener);\r\n    // this.output1 = document.createElement('textarea');\r\n    // this.output2 = document.createElement('output');\r\n    this.view0 = new ImageDataView({ width: 64, height: 64 });\r\n    this.view0.name = 'camera';\r\n    this.view1 = new ImageDataView({ width: 64, height: 64 });\r\n    this.view1.name = 'threshold';\r\n    this.view2 = new ImageDataView({ width: 64, height: 64 });\r\n    this.view2.name = 'detect red';\r\n    this.view3 = new PlotTimeSeriesView();\r\n    this.view4 = new PlotXYView();\r\n    this.inspector.addView(this.view0);\r\n    this.inspector.addView(this.view2);\r\n    this.inspector.addView(this.view1);\r\n    this.inspector.addView(this.view4);\r\n    this.inspector.addView(this.view3);\r\n    // document.body.appendChild(this.output1);\r\n    // document.body.appendChild(this.output2);\r\n  }\r\n\r\n  public initialize(sim: Simulation): void {\r\n    this.camera.initialize(sim);\r\n    sim.addEventListener('pause', () => {\r\n      this.view3.paused = true;\r\n      this.view4.paused = true;\r\n    });\r\n    sim.addEventListener('resume', () => {\r\n      this.view3.paused = false;\r\n      this.view4.paused = false;\r\n    });\r\n    sim.addEventListener('stop', () => {\r\n      this.view3.stop();\r\n      this.view4.stop();\r\n    });\r\n    sim.addEventListener('start', () => {\r\n      this.view3.start();\r\n      this.view4.start();\r\n    });\r\n    this.view3.addSeries('dx', {\r\n      getValue: () => this.dx,\r\n      min: -32,\r\n      max: 32,\r\n    });\r\n    this.view4.addSeries('blob', {\r\n      getValue: () => vec3.fromValues(this.maxBlob.centroid[1], this.maxBlob.centroid[0], this.maxBlob.count / 4),\r\n      min: vec2.fromValues(0, 0),\r\n      max: vec2.fromValues(64, 64),\r\n    });\r\n  }\r\n\r\n  /** Given an image, find the largest red object. */\r\n  private findTarget(image: ImageData): blob {\r\n    const distMap = colorDistance(image, new Uint8ClampedArray([255, 0, 0, 255]));\r\n    this.view2.setData(distMap.data);\r\n    const binMap = threshold(distMap, 32);\r\n    this.view1.setData(binMap.data);\r\n    const blobs = blobify(binMap);\r\n    // this.output2.value = Array.from(blobs.values()).map(b => JSON.stringify(b)).join('\\n');\r\n    let maxBlob: blob = { centroid: vec2.create(), count: 0 };\r\n    for (let b of blobs.values()) {\r\n      if (b.count > maxBlob.count) maxBlob = b;\r\n    }\r\n    return maxBlob;\r\n  }\r\n\r\n  /** Handler for the camera's `capture` event. */\r\n  private onCapture(event: CustomEvent<ImageData>): void {\r\n    this.view0.setData(event.detail.data);\r\n    this.maxBlob = this.findTarget(event.detail);\r\n    const targetX = this.camera.width / 2;\r\n    this.dx = this.maxBlob.centroid[1] - targetX;\r\n    // this.output1.value = JSON.stringify({\r\n    //   dx: dx.toFixed(2),\r\n    //   cr: b.centroid[0].toFixed(2),\r\n    //   cc: b.centroid[1].toFixed(2),\r\n    //   count: b.count\r\n    // });\r\n  }\r\n\r\n  public update(state: SimState): void {\r\n    \r\n  }\r\n}\r\n","import { Simulation, SimState } from './Simulation.js';\r\nimport { AutoMarker, ManualMarker } from './Entity.js';\r\nimport { Robot } from './Robot.js';\r\n// import { vec3, vec4 } from '../node_modules/gl-matrix/esm/index.js';\r\nimport { vec3, vec4 } from 'gl-matrix';\r\n\r\nfunction formatTime(seconds: number) {\r\n  let minutes = Math.floor(seconds / 60);\r\n  seconds -= minutes * 60\r\n  let hours = Math.floor(minutes / 60);\r\n  minutes -= hours * 60;\r\n  let days = Math.floor(hours / 24);\r\n  hours -= days * 24;\r\n  let years = Math.floor(days / 365);\r\n  days -= years * 365;\r\n\r\n  const ddd = `${days}`.padStart(3, '0');\r\n  const time = [\r\n    `${hours}`.padStart(2, '0'),\r\n    `${minutes}`.padStart(2, '0'),\r\n    seconds.toFixed(3).padStart(6, '0'),\r\n  ].join(':');\r\n\r\n  return `${years}-${ddd}/${time}`;\r\n}\r\n\r\nwindow.addEventListener('load', () => {\r\n  const toolbar = document.createElement('div');\r\n  toolbar.setAttribute('role', 'toolbar');\r\n  document.body.appendChild(toolbar);\r\n\r\n  const sim = new Simulation();\r\n\r\n  sim.addEntity(new ManualMarker({\r\n    radius: 3,\r\n    color: '#FF0000',\r\n  }));\r\n\r\n  sim.addEntity(new AutoMarker({\r\n    radius: 4,\r\n    color: '#00FF00',\r\n    ax: 24,\r\n    ay: 8,\r\n    center: vec3.fromValues(32, 32, 0),\r\n    phase: 0,\r\n    period: 1,\r\n  }));\r\n\r\n  sim.addEntity(new AutoMarker({\r\n    radius: 2,\r\n    color: '#0000FF',\r\n    ax: 12,\r\n    ay: 4,\r\n    center: vec3.fromValues(20, 20, 0),\r\n    phase: 1,\r\n    period: 0.4,\r\n  }));\r\n\r\n  const robot = new Robot(vec3.fromValues(0, 0.1, -1), vec4.create());\r\n  sim.addEntity(robot);\r\n  document.body.appendChild(robot.inspector.render());\r\n\r\n  const $time: HTMLInputElement = document.createElement('input');\r\n  $time.title = 'Simulation time';\r\n  $time.disabled = true;\r\n  $time.value = formatTime(sim.state.time);\r\n  toolbar.appendChild($time);\r\n\r\n  const $delta: HTMLInputElement = document.createElement('input');\r\n  $delta.title = 'Time step (ms)';\r\n  $delta.type = 'number';\r\n  $delta.value = sim.timestep.toFixed(3);\r\n  $delta.step = '1';\r\n  $delta.min = '1';\r\n  $delta.style.width = `64px`;\r\n  $delta.addEventListener('input', () => sim.timestep = parseFloat($delta.value));\r\n  toolbar.appendChild($delta);\r\n\r\n  const $timeScaleOut: HTMLOutputElement = document.createElement('output');\r\n  $timeScaleOut.value = `${sim.timeScale}x`;\r\n  $timeScaleOut.title = 'Time scale';\r\n  $timeScaleOut.style.width = `48px`;\r\n  toolbar.appendChild($timeScaleOut);\r\n\r\n  const $timeScale: HTMLInputElement = document.createElement('input');\r\n  $timeScale.type = 'number';\r\n  $timeScale.value = sim.timeScale.toString();\r\n  $timeScale.step = '1';\r\n  $timeScale.style.width = `16px`;\r\n  $timeScale.addEventListener('input', () => {\r\n    sim.timeScale = Math.pow(2, parseFloat($timeScale.value));\r\n    // sim.timeMultiplier = ;\r\n    $timeScaleOut.value = sim.timeScale < 1\r\n      ? `1\\u2044${1 / sim.timeScale}x`\r\n      : `${sim.timeScale}x`;\r\n  });\r\n  toolbar.appendChild($timeScale);\r\n\r\n  const $startButton: HTMLButtonElement = document.createElement('button');\r\n  $startButton.title = 'Start';\r\n  $startButton.classList.add('ms-Icon', 'ms-Icon--Play');\r\n  // $startButton.classList.add('icon');\r\n  // $startButton.textContent = 'play 􀊃\\uDBC0\\uDE83\\u{100283}';\r\n  $startButton.addEventListener('click', sim.start.bind(sim));\r\n  toolbar.appendChild($startButton);\r\n\r\n  const $pauseButton: HTMLButtonElement = document.createElement('button');\r\n  $pauseButton.title = 'Pause';\r\n  $pauseButton.disabled = true;\r\n  $pauseButton.classList.add('ms-Icon', 'ms-Icon--Pause');\r\n  $pauseButton.addEventListener('click', sim.pause.bind(sim));\r\n  toolbar.appendChild($pauseButton);\r\n\r\n  const $stopButton: HTMLButtonElement = document.createElement('button');\r\n  $stopButton.title = 'Stop';\r\n  $stopButton.disabled = true;\r\n  $stopButton.classList.add('ms-Icon', 'ms-Icon--Stop');\r\n  $stopButton.addEventListener('click', sim.stop.bind(sim));\r\n  toolbar.appendChild($stopButton);\r\n\r\n  const $stepButton: HTMLButtonElement = document.createElement('button');\r\n  $stepButton.title = 'Step';\r\n  $stepButton.disabled = true;\r\n  $stepButton.classList.add('ms-Icon', 'ms-Icon--Next');\r\n  $stepButton.addEventListener('click', sim.step.bind(sim));\r\n  toolbar.appendChild($stepButton);\r\n\r\n  // const $ffButton: HTMLButtonElement = document.createElement('button');\r\n  // $ffButton.title = 'Speed';\r\n  // $ffButton.disabled = true;\r\n  // $ffButton.classList.add('ms-Icon', 'ms-Icon--FastForward');\r\n  // $ffButton.addEventListener('click', sim.step.bind(sim));\r\n  // toolbar.appendChild($ffButton);\r\n\r\n  sim.addEventListener('start', () => {\r\n    $startButton.disabled = true;\r\n    $stopButton.disabled = false;\r\n    $pauseButton.disabled = false;\r\n    $stepButton.disabled = true;\r\n    $startButton.classList.remove('ms-Icon--Play');\r\n    $startButton.classList.add('ms-Icon--PlayResume');\r\n    $startButton.title = 'Resume';\r\n  });\r\n\r\n  sim.addEventListener('stop', () => {\r\n    $startButton.disabled = false;\r\n    $stopButton.disabled = true;\r\n    $pauseButton.disabled = true;\r\n    $stepButton.disabled = true;\r\n    $startButton.classList.remove('ms-Icon--PlayResume');\r\n    $startButton.classList.add('ms-Icon--Play');\r\n    $startButton.title = 'Start';\r\n  });\r\n\r\n  sim.addEventListener('pause', () => {\r\n    $startButton.disabled = false;\r\n    $stopButton.disabled = true;\r\n    $pauseButton.disabled = true;\r\n    $stepButton.disabled = false;\r\n  });\r\n\r\n  sim.addEventListener('resume', () => {\r\n    $startButton.disabled = true;\r\n    $stopButton.disabled = false;\r\n    $pauseButton.disabled = false;\r\n    $stepButton.disabled = true;\r\n  });\r\n\r\n  sim.addEventListener('update', ((event: CustomEvent<SimState>) => {\r\n    const state = event.detail;\r\n    $time.value = formatTime(state.time);\r\n  }) as EventListener);\r\n});\r\n"],"names":["glMatrix.ARRAY_TYPE","create","forEach","fromValues","vec2.create","vec3.fromValues","vec2.fromValues","vec3.create","vec4.create"],"mappings":"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"}